<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Draw and Get Coordinates</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"
    />
    <link rel="stylesheet" href="/api/ol/ol.css" type="text/css" />
    <script src="/api/ol/ol.js"></script>
    <style>
      body {
        padding: 0;
        margin: 0;
      }

      .map {
        position: relative;
        bottom: 0;
        right: 0;
        top: 0;
        left: 0;
        height: 100vh;
        width: 100%;
      }

      #coordinates {
        margin-top: 10px;
      }

      .btn-primary {
        position: absolute;
        z-index: 1;
        background-color: darkcyan;
        color: black;
        border: 0;
        border-radius: 20px;
        font-size: smaller;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        cursor: pointer;
      }

      .btn-primary:hover {
        background-color: white;
      }

      .btn-primary p {
        font-size: smaller;
        padding: 5px;
        text-align: center;
        margin: 0;
      }

      .clear-button {
        position: absolute;
        z-index: 1;
        background-color: red;
        color: black;
        border: 0;
        border-radius: 20px;
        font-size: smaller;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        cursor: pointer;
        width: fit-content; /* Set the width to match polygonDrawButton */
      }

      .clear-button:hover {
        background-color: #f2f2f2;
      }

      .btn-distance {
        position: absolute;
        z-index: 1;
        background-color: crimson;
        color: black;
        border: 0;
        border-radius: 120px;
        font-size: smaller;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        cursor: pointer;
        width: fit-content;
      }

      .distance-display {
        position: absolute;
        z-index: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
      }

      .btn-distance p {
        font-size: smaller;
        padding: 5px;
        text-align: center;
        margin: 0;
      }

      #clearButton {
        bottom: 20px;
        right: 20px;
      }

      #lineDrawButton {
        bottom: 60px;
        left: 20px;
      }

      #polygonDrawButton {
        bottom: 100px;
        left: 20px;
      }

      #clearButton {
        bottom: 20px;
        left: 20px;
      }

      #distanceButton {
        bottom: 140px;
        left: 20px;
      }

      #distanceDisplay {
        position: absolute;
        z-index: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
      }

      #areaDisplay {
        position: absolute;
        z-index: 1;
        display: none;
        align-items: center;
        justify-content: center;
        text-align: center;
        top: 2em;
        left: 2em;
        background-color: yellow;
        padding: 5px;
        border-radius: 5px;
      }
    </style>
  </head>
  <body>
    <div id="map" class="map"></div>
    <button id="lineDrawButton" class="btn-primary">
      <p>Start Line</p>
    </button>
    <button id="polygonDrawButton" class="btn-primary">
      <p>Draw Polygon</p>
    </button>
    <div id="coordinates"></div>

    <button id="clearButton" class="clear-button">Clear Features</button>

    <button id="distanceButton" class="btn-distance">
      <p>Calculate Distance</p>
    </button>

    <div id="distanceDisplay"></div>

    <div id="areaDisplay"></div>

    <script src="https://openlayers.org/en/v6.14.4/build/ol.js"></script>
    <script>
      let drawnLineCoordinates = [];
      let drawnPolygonCoordinates = [];

      //define the map
      const map = new ol.Map({
        target: "map",
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM(),
          }),
        ],
        view: new ol.View({
          center: ol.proj.fromLonLat([36.8219, -1.2921]),
          zoom: 10,
        }),
      });

      //initialise the map
      const source = new ol.source.Vector();
      const vector = new ol.layer.Vector({
        source: source,
        style: new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: "blue",
            width: 2,
          }),
          fill: new ol.style.Fill({
            color: "rgba(255, 255, 255, 0.2)",
          }),
          image: new ol.style.Circle({
            radius: 7,
            fill: new ol.style.Fill({
              color: "#ffcc33",
            }),
          }),
        }),
      });
      map.addLayer(vector);

      const lineDraw = new ol.interaction.Draw({
        source: source,
        type: "LineString",
      });

      const polygonDraw = new ol.interaction.Draw({
        source: source,
        type: "Polygon",
      });

      const startLineDraw = () => {
        map.addInteraction(lineDraw);
        lineDraw.on("drawend", (event) => {
          const geometry = event.feature.getGeometry();
          const coordinates = geometry.getCoordinates();
          drawnLineCoordinates = coordinates.map((coordPair) =>
            ol.proj.transform(coordPair, "EPSG:3857", "EPSG:4326")
          );
          map.removeInteraction(lineDraw);
        });
      };

      const areaDisplay = document.getElementById("areaDisplay");

      const startPolygonDraw = () => {
        map.addInteraction(polygonDraw);
        polygonDraw.on("drawend", (event) => {
          const geometry = event.feature.getGeometry();
          let coordinates = geometry
            .getCoordinates()[0]
            .map((coordPair) =>
              ol.proj.transform(coordPair, "EPSG:3857", "EPSG:4326")
            );
          // Connect last point to the first point
          coordinates.push(coordinates[0]);
          drawnPolygonCoordinates = coordinates;
          map.removeInteraction(polygonDraw);

          // Calculate and display the area
          const polygon = new ol.geom.Polygon([drawnPolygonCoordinates]);
          const area = Math.round(polygon.getArea() * 100) / 100;
          alert(`Area of polygon: ${area} square meters`);
        });
      };

      document
        .getElementById("lineDrawButton")
        .addEventListener("click", startLineDraw);
      document
        .getElementById("polygonDrawButton")
        .addEventListener("click", startPolygonDraw);

      const clearDrawnFeatures = () => {
        drawnLineCoordinates = [];
        drawnPolygonCoordinates = [];
        source.clear(); // Clear the vector layer source
      };

      // Event listener for clear button
      document
        .getElementById("clearButton")
        .addEventListener("click", clearDrawnFeatures);

      const distanceButton = document.getElementById("distanceButton");

      const distanceDisplay = document.getElementById("distanceDisplay");

      distanceButton.addEventListener("click", () => {
        if (drawnLineCoordinates.length > 0) {
          const lineString = new ol.geom.LineString(drawnLineCoordinates);
          const length = Math.round(lineString.getLength() * 100) / 100;

          // Calculate the midpoint of the line
          const midpoint = lineString.getCoordinateAt(0.5);

          // Display distance at the midpoint
          distanceDisplay.innerHTML = `Distance of line: ${length} meters`;
          distanceDisplay.style.display = "block";
          distanceDisplay.style.left = `${midpoint[0]}px`;
          distanceDisplay.style.top = `${midpoint[1]}px`;
        } else {
          distanceDisplay.innerHTML = "No line drawn yet.";
          distanceDisplay.style.display = "none";
        }
      });
    </script>
  </body>
</html>
